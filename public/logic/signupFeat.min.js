import{API_URL}from"/js/common/constants.js";const idInput=document.querySelector("#username"),message=document.querySelectorAll(".message"),signupButton=document.querySelector(".button-signup"),buyerButton=document.querySelector(".button-buyer"),sellerButton=document.querySelector(".button-seller"),additionalForm=document.querySelector("fieldset"),input=document.querySelectorAll("input");let passUsername=!1,passPassword=!1,passPassword2=!1,passName=!1,passPhoneNumber=!1,passCRN=!1,passStoreName=!1,passAgreement=!1;for(let i=0;i<input.length;i++)input[i].value="";for(let i=1;i<=3;i++)input[i].addEventListener("focus",()=>{""===input[i-1].value&&(message[i-1].innerText="필수 정보입니다.")});const usernameDuplicateCheck=document.querySelector(".username-duplicate-check");usernameDuplicateCheck.addEventListener("click",async event=>{passUsername=!1,eachRequest(event).then(resJson=>{const usernameRegex=/^[a-zA-Z0-9]{5,20}/;""===idInput.value?message[0].innerText="필수 정보입니다.":usernameRegex.test(idInput.value)?resJson.username&&"해당 사용자 아이디는 이미 존재합니다."===resJson.username[0]?message[0].innerText="이미 사용 중인 아이디입니다.":(message[0].classList.add("possible"),message[0].innerText="사용 가능한 아이디입니다.",passUsername=!0):message[0].innerText="5자 이상 20자 이내 영문 및 숫자만 사용 가능합니다."})}),idInput.addEventListener("input",()=>{message[0].classList.remove("possible"),passUsername=!1,""!==idInput.value&&(message[0].innerText="입력 후 중복확인 버튼을 눌러주세요.")});const passwordInput=document.querySelector("#password"),passwordRegex=/^(?=.*[a-z])(?=.*[0-9])[a-z0-9A-Z\{\}\[\]\/?.,;:|\)*~`!^\-_+<>@\#$%&\\\=\(\'\"]{8,}$/;passwordInput.addEventListener("input",()=>{passwordRegex.test(passwordInput.value)?(message[1].innerText="",passPassword=!0):(message[1].innerText="8자 이상 영문, 숫자, 특수문자를 사용하세요(소문자, 숫자 각1자 이상 필수).",passPassword=!1)});const passwordInput2=document.querySelector("#password2");passwordInput2.addEventListener("input",()=>{passwordInput2.value!==passwordInput.value?(message[2].innerText="비밀번호가 일치하지 않습니다.",passPassword2=!1):(message[2].innerText="",passPassword2=!0)});const nameInput=document.querySelector("#name");nameInput.addEventListener("blur",()=>{""===nameInput.value?(message[3].innerText="필수 정보입니다.",passName=!1):(message[3].innerText="",passName=!0)});const phoneNumber=document.querySelectorAll(".phoneNumber");for(let i=0;i<=2;i++)phoneNumber[i].addEventListener("input",event=>{passPhoneNumber=!1,message[4].classList.remove("possible"),message[4].innerText="",phoneNumberRegexCheck()&&phoneNumberDuplicateCheck(event)});function phoneNumberRegexCheck(){const middleRegex=/^[0-9]{3,4}/,lastRegex=/^[0-9]{4}/;return""!==phoneNumber[1].value&&middleRegex.test(phoneNumber[1].value)&&!(""===phoneNumber[2].value||!lastRegex.test(phoneNumber[2].value))||(message[4].innerText="전화번호를 올바르게 입력해주세요.",!1)}function phoneNumberDuplicateCheck(event){eachRequest(event).then(resJson=>{resJson.phone_number&&"해당 사용자 전화번호는 이미 존재합니다."===resJson.phone_number[0]?message[4].innerText=resJson.phone_number[0]:(message[4].classList.add("possible"),message[4].innerText="사용 가능한 전화번호입니다.",passPhoneNumber=!0)})}const crnDuplicateCheck=document.querySelector(".crn-duplicate-check");function onlyNumber(event){"+"!==event.key&&"-"!==event.key&&"."!==event.key&&"e"!==event.key||event.preventDefault()}function numberMaxLength(){crnInput.value.length>10&&(crnInput.value=crnInput.value.slice(0,10))}const crnInput=document.querySelector("#companyRegistrationNumber");crnInput.addEventListener("keydown",onlyNumber),crnInput.addEventListener("input",()=>{numberMaxLength(),passCRN=!1,message[5].innerText=""}),crnDuplicateCheck.addEventListener("click",async event=>{message[5].classList.remove("possible"),eachRequest(event).then(resJson=>{""===crnInput.value?message[5].innerText="필수 정보입니다.":/^[0-9]{10,10}/.test(crnInput.value)?resJson.company_registration_number&&"해당 사업자등록번호는 이미 존재합니다."===resJson.company_registration_number[0]?message[5].innerText="이미 사용 중인 사업자등록번호입니다.":(message[5].innerText="사용 가능한 사업자등록번호입니다.",message[5].classList.add("possible"),passCRN=!0):message[5].innerText="사업자등록번호 10자리를 입력해주세요."})});const storeNameInput=document.querySelector("#storeName");function storeNameRegexCheck(){const storeNameRegex=/^[a-zA-Z가-힣 ]+$/;return!(""===storeNameInput.value||" "===storeNameInput.value||!storeNameRegex.test(storeNameInput.value)||/\s+(\s)/.test(storeNameInput.value))||(storeNameInput.focus(),message[6].innerText="스토어 이름을 다시 확인해주세요.",!1)}function storeNameDuplicateCheck(event){eachRequest(event).then(resJson=>{resJson.store_name&&"해당 스토어이름은 이미 존재합니다."===resJson.store_name[0]?message[6].innerText="이미 사용 중인 스토어 이름입니다.":(message[6].innerText="사용 가능한 스토어 이름입니다.",message[6].classList.add("possible"),passStoreName=!0)})}storeNameInput.addEventListener("input",async event=>{passStoreName=!1,message[6].classList.remove("possible"),message[6].innerText="",storeNameRegexCheck()&&storeNameDuplicateCheck(event)});const agreementCheckbox=document.querySelector("#personalInfomationAgreement");function allPass(){return!signupType&&passUsername&&passPassword&&passPassword2&&passName&&passPhoneNumber&&passAgreement?(signupButton.disabled=!1,signupButton.style.backgroundColor="#334863",signupButton.innerText="시작하기",signupButton.style.cursor="pointer",!0):signupType&&passUsername&&passPassword&&passPassword2&&passName&&passPhoneNumber&&passCRN&&passStoreName&&passAgreement?(signupButton.disabled=!1,signupButton.style.backgroundColor="#334863",signupButton.innerText="시작하기",signupButton.style.cursor="pointer",!0):(signupButton.disabled=!0,signupButton.style.backgroundColor="#abb5c2",signupButton.innerText="모두 작성해주세요 :)",!1)}agreementCheckbox.addEventListener("click",()=>{passAgreement=!0===agreementCheckbox.checked});for(let i=0;i<input.length;i++)input[i].addEventListener("input",()=>{setTimeout(allPass,500),allPass()});let signupType="";async function eachRequest(event){event.preventDefault();const data={username:idInput.value,phone_number:phoneNumber[0].value+phoneNumber[1].value+phoneNumber[2].value,company_registration_number:crnInput.value,store_name:storeNameInput.value};try{const res=await fetch(`${API_URL}/accounts/signup${signupType}/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(data)}),resJson=await res.json();return resJson}catch(err){console.error(err)}}async function signup(event){event.preventDefault();const signupData={username:idInput.value,password:passwordInput.value,password2:passwordInput2.value,phone_number:phoneNumber[0].value+phoneNumber[1].value+phoneNumber[2].value,name:nameInput.value,company_registration_number:crnInput.value,store_name:storeNameInput.value};try{const res=await fetch(`${API_URL}/accounts/signup${signupType}/`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(signupData)}),resJson=await res.json();resJson.username&&resJson.name&&resJson.phone_number&&resJson.user_type?window.location.href="/login":resJson.username&&resJson.name&&resJson.phone_number&&resJson.user_type&&resJson.company_registration_number&&resJson.store_name&&(window.location.href="/login")}catch(err){console.error(err)}}buyerButton.addEventListener("click",()=>(additionalForm.hidden=!0,buyerButton.style.backgroundColor="inherit",sellerButton.style.backgroundColor="#F2F2F2",signupType="",sellerButton.classList.remove("on"),buyerButton.classList.remove("help"),buyerButton.classList.add("on"),sellerButton.classList.add("help"),signupType)),sellerButton.addEventListener("click",()=>(additionalForm.hidden=!1,signupType="_seller",sellerButton.style.backgroundColor="inherit",buyerButton.style.backgroundColor="#F2F2F2",buyerButton.classList.remove("on"),sellerButton.classList.remove("help"),sellerButton.classList.add("on"),buyerButton.classList.add("help"),allPass(),signupType)),signupButton.addEventListener("click",allPass&&signup);